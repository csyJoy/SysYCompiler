// lalrpop 里的约定
use crate::ast::*;

grammar;

// 约束 lexer 的行为
match {
  // 跳过空白符和注释
  r"\s*" => {},
  r"//[^\n\r]*[\n\r]*" => {},
  // 剩下的情况采用默认方式处理
  _
}

// 定义 CompUnit, 其返回值类型为 String
// parser 在解析完成后的行为是返回 FuncDef 的值
pub CompUnit: CompUnit = <func_def: FuncDef> => CompUnit { <> };

// 同上, 不解释
FuncDef: FuncDef = {
  <func_type: FuncType> <id: Ident> "(" ")" <block: Block> => {
    FuncDef { <> }
  }
};

FuncType: FuncType = "int" => FuncType::Int;

Block: Block = "{" <stmt: Stmt> "}" => Block { <> };

Stmt: Stmt = "return" <exp: Exp> ";" => Stmt { stmt_type: StmtType::Return(<>) };

Exp: Exp = <exp: AddExp> => Exp { exp: Some(Box::new(exp)) };

<<<<<<< Updated upstream
=======
Exp: Exp = <exp: AddExp> => Exp { exp: Some(Box::new(exp)) };

>>>>>>> Stashed changes
MulExp: MulExp = {
    <unary_exp: UnaryExp> => MulExp{ unary_exp: Some(Box::new(<>)), mul_operate: None},
    <mul_exp: MulExp> "*" <unary_exp: UnaryExp> => MulExp{unary_exp: None, mul_operate: Some((Box::new(mul_exp),
    MulOperator::Times, Box::new(unary_exp)))},
    <mul_exp: MulExp> "/" <unary_exp: UnaryExp> =>MulExp{unary_exp: None, mul_operate: Some((Box::new(mul_exp),
                                                      MulOperator::Divide, Box::new(unary_exp)))},
    <mul_exp: MulExp> "%" <unary_exp: UnaryExp> =>MulExp{unary_exp: None, mul_operate: Some((Box::new(mul_exp),
                                                      MulOperator::Quote, Box::new(unary_exp)))},
}

AddExp: AddExp = {
    <mul_exp: MulExp> => AddExp{mul_exp: Some(Box::new(<>)), add_operate: None},
    <add_exp: AddExp> "+" <mul_exp: MulExp> => AddExp{mul_exp: None, add_operate: Some((Box::new(add_exp),
    AddOperator::Add, Box::new(mul_exp)))},
    <add_exp: AddExp> "-" <mul_exp: MulExp> => AddExp{mul_exp: None, add_operate: Some((Box::new(add_exp),
    AddOperator::Sub, Box::new(mul_exp)))},
}

UnaryExp: UnaryExp = {
    <primary_exp: PrimaryExp> => UnaryExp{ primary_exp: Some(Box::new(primary_exp)), unary_exp: None },
    <unary_op: UnaryOp> <unary_exp: UnaryExp> => UnaryExp{primary_exp: None, unary_exp: Some((unary_op, Box::new
    (unary_exp)))},
}
PrimaryExp: PrimaryExp = {
    "(" <exp: Exp> ")" => PrimaryExp{ exp: Some(Box::new(exp)), num: None},
    <num: Number> => PrimaryExp{ exp: None, num: Some(num)},
}
UnaryOp: UnaryOp = {
    "+" => UnaryOp{ unary_op: UnaryOperator::Add },
    "-" => UnaryOp{ unary_op: UnaryOperator::Sub },
    "!" => UnaryOp{ unary_op: UnaryOperator::False },
}

Number: i32 = <num: IntConst> => num;

// 如果匹配到标识符, 就返回这个字符串
// 一对尖括号在此处指代的是正则表达式匹配到的字符串 (&str)
// 关于尖括号到底代表什么, 请 RTFM
Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

// 对整数字面量的处理方式: 把匹配到的字符串按对应进制转换成数字
IntConst: i32 = {
  r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
  r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
  r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}