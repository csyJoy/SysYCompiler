// lalrpop 里的约定
use crate::frontEnd::ast::*;
grammar;

// 约束 lexer 的行为
match {
  // 跳过空白符和注释
  r"\s*" => {},
  r"//[^\n\r]*[\n\r]*" => {},
  r"/\*[^*]*\*+(?:[^/*][^*]*\*+)*/" => {},
  // 剩下的情况采用默认方式处理
  _
}

// 定义 CompUnit, 其返回值类型为 String
// parser 在解析完成后的行为是返回 FuncDef 的值
pub CompUnit: CompUnit = <items: (<GlobalItem>)*> => CompUnit { <> };

GlobalItem: GlobalItem = {
    <decl:Decl> => GlobalItem::Decl(decl),
    <func_def: FuncDef> => GlobalItem::FuncDef(func_def)
}

// 同上, 不解释
FuncDef: FuncDef = {
    <func_head: FuncHead> "(" <params: (<FuncParams>)?> ")" <block: Block> => {
    FuncDef { func_type: func_head.0, id: func_head.1, params: params, block: block }
    // FuncDef { func_type: func_type, id: id, params: params, block: block }
  }
};
FuncType: FuncType = {
    "int" => FuncType::Int,
    "void" => FuncType::Void
}
FuncHead: (FuncType, String) = {
    "int" <id: Ident>  => (FuncType::Int, id),
    "void" <id: Ident>  =>  (FuncType::Void, id)
}
FuncParams: FuncParams = {
    <param: FuncParam> <params: ("," <FuncParam>)*> => FuncParams{<>}
}
FuncParam: FuncParam = {
    <btype: BType> <ident: Ident> <array_idx: (<ArrayIdx>)?>=> {
        if let Some(array_idx) = array_idx{
            FuncParam{btype: btype, ident:ident, array_idx: Some(array_idx)}
        } else {
            FuncParam{btype: btype, ident:ident, array_idx: None}
        }
    }
}

ArrayIdx: ArrayIdx = {
    "[" "]" <const_exp: ("[" <ConstExp> "]")*> => ArrayIdx{ <> }
}


Block: Block = "{" <block_item: (BlockItem)*> "}" => Block { <> };
BlockItem: BlockItem = {
    <decl: Decl> => BlockItem{decl: Some(decl), stmt: None},
    <stmt: Stmt> => BlockItem{decl: None, stmt: Some(stmt)}
}

Stmt: Stmt = {
    MatchedStmt => <>,
    OpenStmt => <>,
}

MatchedStmt: Stmt = {
    <lval: Lval> "=" <exp: Exp> ";" => Stmt{stmt_type: StmtType::Assign((<>))},
    <exp:(Exp)?> ";" => Stmt{ stmt_type: StmtType::Exp(<>) },
    <block :Block> => Stmt{ stmt_type: StmtType::StmtBlock(<>) },
    "if" "(" <exp: Exp> ")" <then: MatchedStmt> "else" <else_then: MatchedStmt> => Stmt{stmt_type: StmtType::Branch(
    BranchType::Matched(Box::new((exp, then, else_then))))},
    "while" "(" <exp: Exp> ")" <stmt: MatchedStmt> => Stmt{ stmt_type: StmtType::While(Box::new((<>)))},
    "return" <exp: (Exp)?> ";" => Stmt { stmt_type: StmtType::Return(<>) },
    "break" ";" => Stmt{stmt_type: StmtType::Break},
    "continue" ";" => Stmt{stmt_type: StmtType::Continue}
}
OpenStmt: Stmt = {
    "if" "(" <exp: Exp> ")" <then: Stmt> => Stmt{stmt_type: StmtType::Branch(
                                                BranchType::UnMatched(Box::new((exp, then, None))))},
    "if" "(" <exp: Exp> ")" <then: MatchedStmt> "else" <else_then: OpenStmt> => Stmt{stmt_type: StmtType::Branch(
                                                                               BranchType::UnMatched(Box::new((exp,
                                                                               then, Some(else_then)))))},
    "while" "(" <exp: Exp> ")" <stmt: OpenStmt> => Stmt{ stmt_type: StmtType::While(Box::new((<>)))},
}


Exp: Exp = <exp: LOrExp> => Exp { exp: Some(Box::new(exp)) };


MulExp: MulExp = {
    <unary_exp: UnaryExp> => MulExp{ unary_exp: Some(Box::new(<>)), mul_operate: None},
    <mul_exp: MulExp> "*" <unary_exp: UnaryExp> => MulExp{unary_exp: None, mul_operate: Some((Box::new(mul_exp),
    MulOperator::Times, Box::new(unary_exp)))},
    <mul_exp: MulExp> "/" <unary_exp: UnaryExp> =>MulExp{unary_exp: None, mul_operate: Some((Box::new(mul_exp),
                                                      MulOperator::Divide, Box::new(unary_exp)))},
    <mul_exp: MulExp> "%" <unary_exp: UnaryExp> =>MulExp{unary_exp: None, mul_operate: Some((Box::new(mul_exp),
                                                      MulOperator::Quote, Box::new(unary_exp)))},
}

AddExp: AddExp = {
    <mul_exp: MulExp> => AddExp{mul_exp: Some(Box::new(<>)), add_operate: None},
    <add_exp: AddExp> "+" <mul_exp: MulExp> => AddExp{mul_exp: None, add_operate: Some((Box::new(add_exp),
    AddOperator::Add, Box::new(mul_exp)))},
    <add_exp: AddExp> "-" <mul_exp: MulExp> => AddExp{mul_exp: None, add_operate: Some((Box::new(add_exp),
    AddOperator::Sub, Box::new(mul_exp)))},
}
RelExp: RelExp = {
    <add_exp: AddExp> => RelExp{ add_exp: Some(Box::new(add_exp)), rel_operate: None},
    <rel_exp: RelExp> "<" <add_exp: AddExp> => RelExp{ add_exp: None, rel_operate: Some((Box::new(rel_exp),
    RelOperation::Less, Box::new(add_exp)))},
    <rel_exp: RelExp> ">" <add_exp: AddExp> => RelExp{ add_exp: None, rel_operate: Some((Box::new(rel_exp),
    RelOperation::Greater, Box::new(add_exp)))},
    <rel_exp: RelExp> "<=" <add_exp: AddExp> => RelExp{ add_exp: None, rel_operate: Some((Box::new(rel_exp),
    RelOperation::LessEq, Box::new(add_exp)))},
    <rel_exp: RelExp> ">=" <add_exp: AddExp> => RelExp{ add_exp: None, rel_operate: Some((Box::new(rel_exp),
    RelOperation::GreaterEq, Box::new(add_exp)))},
}

EqExp: EqExp = {
    <rel_exp: RelExp> => EqExp{ rel_exp: Some(Box::new(rel_exp)), eq_operate: None},
    <eq_exp: EqExp> "==" <rel_exp: RelExp> => EqExp{ rel_exp: None, eq_operate: Some((Box::new(eq_exp),
    EqOperation::Eq, Box::new(rel_exp)))},
    <eq_exp: EqExp> "!=" <rel_exp: RelExp> => EqExp{ rel_exp: None, eq_operate: Some((Box::new(eq_exp),
    EqOperation::NEq, Box::new(rel_exp)))},
}
LAndExp: LAndExp = {
    <eq_exp: EqExp> => LAndExp{ eq_exp: Some(Box::new(eq_exp)), land_operate: None},
    <land_exp: LAndExp> "&&" <eq_exp: EqExp> => LAndExp{ eq_exp: None, land_operate: Some((Box::new(land_exp),
    Box::new(eq_exp)))},
}
LOrExp: LOrExp = {
    <land_exp: LAndExp> => LOrExp{ land_exp: Some(Box::new(land_exp)), lor_operate: None},
    <lor_exp: LOrExp> "||" <land_exp: LAndExp> => LOrExp{ land_exp: None, lor_operate: Some((Box::new(lor_exp),
    Box::new(land_exp)))}
}

UnaryExp: UnaryExp = {
    <primary_exp: PrimaryExp> => UnaryExp{ primary_exp: Some(Box::new(primary_exp)), unary_exp: None , func_call: None},
    <unary_op: UnaryOp> <unary_exp: UnaryExp> => UnaryExp{primary_exp: None, unary_exp: Some((unary_op, Box::new
    (unary_exp))), func_call: None},
    <ident: Ident> "(" <func_params: (FuncRParams)?> ")" => UnaryExp{primary_exp: None, unary_exp: None, func_call: Some
    ((ident, func_params))}
}
FuncRParams: FuncRParams = {
    <exp: Exp> <exp_vec: ("," <Exp>)*> => FuncRParams{<>}
}
Lval: Lval = {
    <ident: Ident> <array_idx: ("[" <Exp> "]")*>=> Lval{<>}
}
PrimaryExp: PrimaryExp = {
    "(" <exp: Exp> ")" => PrimaryExp{ exp: Some(Box::new(exp)), lval: None, num: None},
    <lval: Lval> => PrimaryExp{ exp: None, lval: Some(lval), num:None},
    <num: Number> => PrimaryExp{ exp: None, lval: None, num: Some(num)},
}
UnaryOp: UnaryOp = {
    "+" => UnaryOp{ unary_op: UnaryOperator::Add },
    "-" => UnaryOp{ unary_op: UnaryOperator::Sub },
    "!" => UnaryOp{ unary_op: UnaryOperator::False },
}

Number: i32 = <num: IntConst> => num;

Decl: Decl = {
    <const_decl:ConstDecl> => Decl{const_decl: Some(Box::new(const_decl)), var_decl: None},
    <var_decl:VarDecl> => Decl{const_decl: None, var_decl: Some(Box::new(var_decl))}
}
ConstDecl: ConstDecl = {
    "const" <b_type:BType> <const_def:ConstDef> <const_def_vec:("," <ConstDef>)*> ";" => {
        if const_def_vec.is_empty(){
            ConstDecl{b_type: b_type, const_def: const_def, const_def_vec: None}
        } else {
            ConstDecl{b_type: b_type, const_def: const_def, const_def_vec: Some(const_def_vec)}
        }
    },
}
BType: BType = {
    "int" => BType::Int,
}
ConstDef: ConstDef = {
    <ident: Ident> <array_idx: ("[" <ConstExp> "]")*>"=" <const_init_val:(ConstInitVal)?> => {
        ConstDef{<>}
    }
}
ConstInitVal: ConstInitVal = {
    <const_exp: ConstExp> => ConstInitVal{const_exp: Some(const_exp), array_init_vec: None},
    "{"<array_init_vec: (<ConstArrayInit>)?>"}" => {
        if let Some(array_init_vec) = array_init_vec{
            ConstInitVal{const_exp: None, array_init_vec: Some(Box::new(array_init_vec))}
        } else {
            ConstInitVal{const_exp: None, array_init_vec: None}
        }
    }
}
ConstArrayInit: ConstArrayInit = {
    <array_init: ConstInitVal> <array_init_vec: ("," <ConstInitVal>)*> => ConstArrayInit{<>}
}

ConstExp: ConstExp = {
    <exp: Exp> => ConstExp{<>}
}

VarDecl: VarDecl = {
    "int" <var_def: VarDef> <var_def_vec:("," <VarDef>)*> ";" => {
        VarDecl{b_type: BType::Int, var_def: var_def, var_def_vec: var_def_vec}
    }
}
VarDef: VarDef = {
    <ident: Ident> <array_init: ("["<ConstExp>"]")*> <initval: ("=" <InitVal>)?> => VarDef{<>}
}
InitVal: InitVal = {
    <exp: Exp> => InitVal{ exp: Some(exp) , array_init_vec: None},
    "{" <array_init: (<VarArrayInit>)? > "}" =>{
        if let Some(array_init) = array_init{
            InitVal{exp: None, array_init_vec: Some(Box::new(array_init))}
        } else {
            InitVal{exp: None, array_init_vec: None}
        }
    }
}
VarArrayInit: VarArrayInit = {
    <array_init: InitVal> <array_init_vec: ("," <InitVal>)*> => VarArrayInit{<>}
}


// 如果匹配到标识符, 就返回这个字符串
// 一对尖括号在此处指代的是正则表达式匹配到的字符串 (&str)
// 关于尖括号到底代表什么, 请 RTFM
Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

// 对整数字面量的处理方式: 把匹配到的字符串按对应进制转换成数字
IntConst: i32 = {
  r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
  r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
  r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}


//VarDecl: VarDecl = {
//    <b_type: BType> <var_def: VarDef>
//}
